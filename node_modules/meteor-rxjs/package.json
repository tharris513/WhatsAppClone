{
  "_args": [
    [
      {
        "raw": "meteor-rxjs",
        "scope": null,
        "escapedName": "meteor-rxjs",
        "name": "meteor-rxjs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/TaylorHarris/whatsapp"
    ]
  ],
  "_from": "meteor-rxjs@latest",
  "_id": "meteor-rxjs@0.4.7",
  "_inCache": true,
  "_location": "/meteor-rxjs",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/meteor-rxjs-0.4.7.tgz_1482306029326_0.319314501946792"
  },
  "_npmUser": {
    "name": "dotansimha",
    "email": "dotansimha@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "meteor-rxjs",
    "scope": null,
    "escapedName": "meteor-rxjs",
    "name": "meteor-rxjs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/meteor-rxjs/-/meteor-rxjs-0.4.7.tgz",
  "_shasum": "5c206ec0fe384bfcd38536878e37fa2ea2ec0f5c",
  "_shrinkwrap": null,
  "_spec": "meteor-rxjs",
  "_where": "/Users/TaylorHarris/whatsapp",
  "author": {
    "name": "Angular2-Meteor",
    "url": "https://github.com/Urigo/angular2-meteor"
  },
  "bugs": {
    "url": "https://github.com/Urigo/mongo-rxjs-observable/issues"
  },
  "dependencies": {},
  "description": "Use Meteor API in RxJS style",
  "devDependencies": {
    "@types/chai": "^3.4.34",
    "@types/meteor": "^1.3.31",
    "@types/mocha": "2.2.34",
    "@types/underscore": "1.7.36",
    "conventional-changelog": "1.1.0",
    "conventional-changelog-cli": "1.2.0",
    "jsdoc-to-markdown": "2.0.1",
    "rollup": "0.37.1",
    "rxjs": "^5.0.0-rc.4",
    "tslint": "4.1.0",
    "typescript": "2.1.4",
    "zone.js": "^0.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "5c206ec0fe384bfcd38536878e37fa2ea2ec0f5c",
    "tarball": "https://registry.npmjs.org/meteor-rxjs/-/meteor-rxjs-0.4.7.tgz"
  },
  "gitHead": "a3b08b7456c2e40b9f847f648c2882e1adb4d121",
  "greenkeeper": {
    "ignore": [
      "rxjs"
    ]
  },
  "homepage": "http://www.angular-meteor.com",
  "keywords": [
    "rxjs",
    "angular",
    "angular2",
    "meteor",
    "mongo",
    "typescript"
  ],
  "license": "MIT",
  "main": "dist/bundles/index.umd.js",
  "maintainers": [
    {
      "name": "dotansimha",
      "email": "dotansimha@gmail.com"
    },
    {
      "name": "urigo",
      "email": "uri.goldshtein@gmail.com"
    }
  ],
  "module": "dist/index.js",
  "name": "meteor-rxjs",
  "optionalDependencies": {},
  "peerDependencies": {
    "babel-runtime": "^6.18.0",
    "rxjs": "^5.0.1"
  },
  "readme": "# Meteor + RxJS\r\n\r\n[![npm version](https://badge.fury.io/js/meteor-rxjs.svg)](https://badge.fury.io/js/meteor-rxjs) [![Build Status](https://travis-ci.org/Urigo/meteor-rxjs.svg?branch=master)](https://travis-ci.org/Urigo/meteor-rxjs) [![bitHound Overall Score](https://www.bithound.io/github/Urigo/meteor-rxjs/badges/score.svg)](https://www.bithound.io/github/Urigo/meteor-rxjs) [![bitHound Code](https://www.bithound.io/github/Urigo/meteor-rxjs/badges/code.svg)](https://www.bithound.io/github/Urigo/meteor-rxjs) [![bitHound Dev Dependencies](https://www.bithound.io/github/Urigo/meteor-rxjs/badges/devDependencies.svg)](https://www.bithound.io/github/Urigo/meteor-rxjs/master/dependencies/npm) \r\n\r\nHarness Meteor reactivity with RxJS.\r\n\r\nRxJS is built to simplify complexity dealing with reactive data flows. At the same time, Meteor's Minimongo cursors are a good target for RxJS API due to their reactivity. Thus, combining RxJS and Meteor, we bring together best parts of two worlds.\r\n\r\n# API Documentation\r\n\r\nAPI documentation is available inside this repository, [here](https://github.com/Urigo/meteor-rxjs/tree/master/docs).\r\n\r\n## Mongo Cursor Observable\r\nAs soon as you install this package (`npm install meteor-rxjs`), you have ability to use a special Mongo collection class that works\r\nwith cursor observables instead of the ordinary Mongo cursors. In other words, one can subscribe on the Mongo cursor's data updates now as follows:\r\n\r\n```ts\r\n\r\nimport {MongoObservable} from 'meteor-rxjs';\r\n\r\nconst Tasks = new MongoObservable.Collection<Task>('tasks');\r\n\r\nTasks.find({checked: false})\r\n  .map(tasks => tasks.length)\r\n  .subscribe(todoCount => console.log(todoCount));\r\n\r\n```\r\n\r\nSince this cursor observable is of RxJS’s type, every other methods and operators available to the observables as part of the RxJS API are also now available to the users, e.g., one can debounce data updates using RxJS’s debouncing operator:\r\n\r\n```ts\r\n\r\nimport {Observable} from 'rxjs';\r\n\r\nimport 'rxjs/add/operator/debounce';\r\n\r\nTasks.find({checked: false})\r\n  .debounce(() => Observable.interval(50))\r\n  .map(tasks => tasks.length)\r\n  .subscribe(todoCount => console.log(todoCount));\r\n\r\n```\r\n\r\n## Usage with Meteor packages\r\n\r\nMeteor has a lot of packages that extend `Mongo.Collection` with new methods. Since `MongoObservable.Collection` is a wrapper over `Mongo.Collection`, you can't use new methods on observable instances directly. The solution here is to pass `Mongo.Collection`'s instance to the observable constructor, and use them whenever you need after separately:\r\n```ts\r\nlet collection = new Mongo.Collection('foo');\r\nlet observable = new MongoObservable.Collection(collection);\r\ncollection.attachSchema(...); // with SimpleSchema package\r\n```\r\n\r\n## Usage in Angular 2\r\n\r\nAngular 2 has tight integration with RxJS since Angular 2 is desinged to support reactive UI updates.\r\nOne of the realizations of this integration is `AsyncPipe`, which is supposed to be used with RxJS observables.\r\n\r\nIn order to subscribe on the Mongo cursor observable's updates and iterate through the returned list of docs in Angular 2, one can use `AsyncPipe` in an Angular 2 component as follows:\r\n\r\n```ts\r\n\r\nconst Tasks = new MongoObservable.Collection<Task>('tasks');\r\n\r\n@Component({\r\n  selector: 'task-list',\r\n  template: `<ul><li *ngFor=\"let task of tasks | async\"></li></ul>`\r\n})\r\nclass Tasks {\r\n  tasks = Tasks.find().zone();\r\n}\r\n\r\n````\r\n\r\n### Zone operator\r\n\r\nAs you can see above we called `zone` method of the cursor observable. This is a special\r\nZone operator that is implemeted by `meteor-rxjs` for the Angular 2 users' convenience.\r\nThis operator runs ngZone each time when new data arrives to the Mongo cursor observable,\r\nthus we force UI updates at the right time using it.\r\n\r\nIt makes sense to improve performance of the above `Tasks` component by debouncing UI updates.\r\nIn this case we are using Zone operator as well:\r\n\r\n```ts\r\n\r\nclass List {\r\n  tasks = Tasks.find()\r\n  .debounce(() => Observable.interval(50))\r\n  .zone();\r\n}\r\n\r\n```\r\n\r\n##License\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Urigo/mongo-rxjs-observable.git"
  },
  "scripts": {
    "build": "npm run build-only && npm run bundle && npm run docs",
    "build-only": "tsc || echo not ok",
    "bundle": "rollup -i ./dist/index.js -o ./dist/bundles/index.umd.js -n meteor.rxjs -c rollup.config.js",
    "changelog": "$(npm bin)/conventional-changelog -p meteor-rxjs -i CHANGELOG.md -s -r 0",
    "docs": "./generate-docs.sh",
    "lint": "tslint src/**/*.ts",
    "prebuild": "npm run lint",
    "prepublish": "npm run build",
    "pretest": "npm run build && cd tests && rm -rf node_modules && npm install",
    "test": "cd tests && meteor test --driver-package dispatch:mocha-phantomjs",
    "test:ci": "npm run pretest && cd tests && meteor test --once --driver-package dispatch:mocha-phantomjs"
  },
  "typings": "dist/index.d.ts",
  "version": "0.4.7"
}
